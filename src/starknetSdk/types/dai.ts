/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type {
  Contract,
  Overrides,
  Invocation,
  EstimateFeeResponse,
  api,
} from "starknet";
import type { BigNumberish } from "starknet/utils/number";
import type BN from "bn.js";
import type { BlockIdentifier } from "starknet/provider/utils";

export type Uint256 = { low: BigNumberish; high: BigNumberish };
export type Uint256Output = { low: BN; high: BN };

export interface dai extends Contract {
  decimals(options?: {
    blockIdentifier?: BlockIdentifier;
  }): Promise<[BN] & { res: BN }>;
  name(options?: {
    blockIdentifier?: BlockIdentifier;
  }): Promise<[BN] & { res: BN }>;
  symbol(options?: {
    blockIdentifier?: BlockIdentifier;
  }): Promise<[BN] & { res: BN }>;
  totalSupply(options?: {
    blockIdentifier?: BlockIdentifier;
  }): Promise<[Uint256Output] & { res: Uint256Output }>;
  balanceOf(
    user: BigNumberish,
    options?: { blockIdentifier?: BlockIdentifier }
  ): Promise<[Uint256Output] & { res: Uint256Output }>;
  allowance(
    owner: BigNumberish,
    spender: BigNumberish,
    options?: { blockIdentifier?: BlockIdentifier }
  ): Promise<[Uint256Output] & { res: Uint256Output }>;
  wards(
    user: BigNumberish,
    options?: { blockIdentifier?: BlockIdentifier }
  ): Promise<[BN] & { res: BN }>;
  mint(
    account: BigNumberish,
    amount: Uint256,
    options?: Overrides
  ): Promise<api.RPC.AddTransactionResponse>;
  burn(
    account: BigNumberish,
    amount: Uint256,
    options?: Overrides
  ): Promise<api.RPC.AddTransactionResponse>;
  rely(
    user: BigNumberish,
    options?: Overrides
  ): Promise<api.RPC.AddTransactionResponse>;
  deny(
    user: BigNumberish,
    options?: Overrides
  ): Promise<api.RPC.AddTransactionResponse>;
  transfer(
    recipient: BigNumberish,
    amount: Uint256,
    options?: Overrides
  ): Promise<api.RPC.AddTransactionResponse>;
  transferFrom(
    sender: BigNumberish,
    recipient: BigNumberish,
    amount: Uint256,
    options?: Overrides
  ): Promise<api.RPC.AddTransactionResponse>;
  approve(
    spender: BigNumberish,
    amount: Uint256,
    options?: Overrides
  ): Promise<api.RPC.AddTransactionResponse>;
  increaseAllowance(
    spender: BigNumberish,
    amount: Uint256,
    options?: Overrides
  ): Promise<api.RPC.AddTransactionResponse>;
  decreaseAllowance(
    spender: BigNumberish,
    amount: Uint256,
    options?: Overrides
  ): Promise<api.RPC.AddTransactionResponse>;
  functions: {
    decimals(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[BN] & { res: BN }>;
    name(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[BN] & { res: BN }>;
    symbol(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[BN] & { res: BN }>;
    totalSupply(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[Uint256Output] & { res: Uint256Output }>;
    balanceOf(
      user: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[Uint256Output] & { res: Uint256Output }>;
    allowance(
      owner: BigNumberish,
      spender: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[Uint256Output] & { res: Uint256Output }>;
    wards(
      user: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[BN] & { res: BN }>;
    mint(
      account: BigNumberish,
      amount: Uint256,
      options?: Overrides
    ): Promise<api.RPC.AddTransactionResponse>;
    burn(
      account: BigNumberish,
      amount: Uint256,
      options?: Overrides
    ): Promise<api.RPC.AddTransactionResponse>;
    rely(
      user: BigNumberish,
      options?: Overrides
    ): Promise<api.RPC.AddTransactionResponse>;
    deny(
      user: BigNumberish,
      options?: Overrides
    ): Promise<api.RPC.AddTransactionResponse>;
    transfer(
      recipient: BigNumberish,
      amount: Uint256,
      options?: Overrides
    ): Promise<api.RPC.AddTransactionResponse>;
    transferFrom(
      sender: BigNumberish,
      recipient: BigNumberish,
      amount: Uint256,
      options?: Overrides
    ): Promise<api.RPC.AddTransactionResponse>;
    approve(
      spender: BigNumberish,
      amount: Uint256,
      options?: Overrides
    ): Promise<api.RPC.AddTransactionResponse>;
    increaseAllowance(
      spender: BigNumberish,
      amount: Uint256,
      options?: Overrides
    ): Promise<api.RPC.AddTransactionResponse>;
    decreaseAllowance(
      spender: BigNumberish,
      amount: Uint256,
      options?: Overrides
    ): Promise<api.RPC.AddTransactionResponse>;
  };
  callStatic: {
    decimals(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[BN] & { res: BN }>;
    name(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[BN] & { res: BN }>;
    symbol(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[BN] & { res: BN }>;
    totalSupply(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[Uint256Output] & { res: Uint256Output }>;
    balanceOf(
      user: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[Uint256Output] & { res: Uint256Output }>;
    allowance(
      owner: BigNumberish,
      spender: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[Uint256Output] & { res: Uint256Output }>;
    wards(
      user: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[BN] & { res: BN }>;
    mint(
      account: BigNumberish,
      amount: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[] & {}>;
    burn(
      account: BigNumberish,
      amount: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[] & {}>;
    rely(
      user: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[] & {}>;
    deny(
      user: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[] & {}>;
    transfer(
      recipient: BigNumberish,
      amount: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[BN] & { res: BN }>;
    transferFrom(
      sender: BigNumberish,
      recipient: BigNumberish,
      amount: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[BN] & { res: BN }>;
    approve(
      spender: BigNumberish,
      amount: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[BN] & { res: BN }>;
    increaseAllowance(
      spender: BigNumberish,
      amount: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[BN] & { res: BN }>;
    decreaseAllowance(
      spender: BigNumberish,
      amount: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[BN] & { res: BN }>;
  };
  populateTransaction: {
    decimals(options?: { blockIdentifier?: BlockIdentifier }): Invocation;
    name(options?: { blockIdentifier?: BlockIdentifier }): Invocation;
    symbol(options?: { blockIdentifier?: BlockIdentifier }): Invocation;
    totalSupply(options?: { blockIdentifier?: BlockIdentifier }): Invocation;
    balanceOf(
      user: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Invocation;
    allowance(
      owner: BigNumberish,
      spender: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Invocation;
    wards(
      user: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Invocation;
    mint(
      account: BigNumberish,
      amount: Uint256,
      options?: Overrides
    ): Invocation;
    burn(
      account: BigNumberish,
      amount: Uint256,
      options?: Overrides
    ): Invocation;
    rely(user: BigNumberish, options?: Overrides): Invocation;
    deny(user: BigNumberish, options?: Overrides): Invocation;
    transfer(
      recipient: BigNumberish,
      amount: Uint256,
      options?: Overrides
    ): Invocation;
    transferFrom(
      sender: BigNumberish,
      recipient: BigNumberish,
      amount: Uint256,
      options?: Overrides
    ): Invocation;
    approve(
      spender: BigNumberish,
      amount: Uint256,
      options?: Overrides
    ): Invocation;
    increaseAllowance(
      spender: BigNumberish,
      amount: Uint256,
      options?: Overrides
    ): Invocation;
    decreaseAllowance(
      spender: BigNumberish,
      amount: Uint256,
      options?: Overrides
    ): Invocation;
  };
  estimateFee: {
    decimals(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<EstimateFeeResponse>;
    name(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<EstimateFeeResponse>;
    symbol(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<EstimateFeeResponse>;
    totalSupply(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<EstimateFeeResponse>;
    balanceOf(
      user: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    allowance(
      owner: BigNumberish,
      spender: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    wards(
      user: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    mint(
      account: BigNumberish,
      amount: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    burn(
      account: BigNumberish,
      amount: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    rely(
      user: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    deny(
      user: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    transfer(
      recipient: BigNumberish,
      amount: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    transferFrom(
      sender: BigNumberish,
      recipient: BigNumberish,
      amount: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    approve(
      spender: BigNumberish,
      amount: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    increaseAllowance(
      spender: BigNumberish,
      amount: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    decreaseAllowance(
      spender: BigNumberish,
      amount: Uint256,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
  };
}
